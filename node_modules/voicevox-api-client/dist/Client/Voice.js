"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceClient = void 0;
class VoiceClient {
    constructor(client) {
        this.client = client;
    }
    createVoice(speaker, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/synthesis?speaker=${speaker}`, {
                body: JSON.stringify(query),
            });
            return yield res.arrayBuffer();
        });
    }
    createVoiceCancellable(speaker, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/cancellable_synthesis?speaker=${speaker}`, {
                body: JSON.stringify(query),
            });
            return res;
        });
    }
    createVoiceMulti(speaker, queries) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/multi_synthesis?speaker=${speaker}`, {
                body: JSON.stringify(queries),
            });
            return yield res.arrayBuffer();
        });
    }
    createVoiceMorphing(base_speaker, target_speaker, morph_rate, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/synthesis_morphing?base_speaker=${base_speaker}&target_speaker=${target_speaker}&morph_rate=${morph_rate}`, {
                body: JSON.stringify(query),
            });
            return yield res.arrayBuffer();
        });
    }
}
exports.VoiceClient = VoiceClient;
//# sourceMappingURL=Voice.js.map