"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClient = void 0;
class QueryClient {
    constructor(client) {
        this.client = client;
    }
    createQuery(speaker, text) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/audio_query?speaker=${speaker}&text=${encodeURIComponent(text)}`);
            return yield res.json();
        });
    }
    createQueryWithPreset(preset, text) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/audio_query_from_preset?preset_id=${preset}&text=${encodeURIComponent(text)}`);
            return yield res.json();
        });
    }
    getAccentPhrases(speaker, text, is_kana) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/accent_phrases?speaker=${speaker}&text=${encodeURIComponent(text)}?is_kana=${is_kana}`);
            return yield res.json();
        });
    }
    getPitchAndPhonemeLength(speaker, moras, accent, pause_mora) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/mora_data?speaker=${speaker}`, {
                body: JSON.stringify({
                    moras,
                    accent,
                    pause_mora,
                }),
            });
            return yield res.json();
        });
    }
    getPhonemeLength(speaker, moras, accent, pause_mora) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/mora_length?speaker=${speaker}`, {
                body: JSON.stringify({
                    moras,
                    accent,
                    pause_mora,
                }),
            });
            return yield res.json();
        });
    }
    getPitch(speaker, moras, accent, pause_mora) {
        return __awaiter(this, void 0, void 0, function* () {
            const res = yield this.client.request(`/mora_pitch?speaker=${speaker}`, {
                body: JSON.stringify({
                    moras,
                    accent,
                    pause_mora,
                }),
            });
            return yield res.json();
        });
    }
}
exports.QueryClient = QueryClient;
//# sourceMappingURL=Query.js.map